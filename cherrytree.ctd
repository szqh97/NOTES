<?xml version="1.0" ?><cherrytree><node name="C++" prog_lang="custom-colors" readonly="False" tags="C++" unique_id="1"><rich_text>1.
        u.lmsg.content =
            (content_t*) malloc (sizeof (content_t) + size_);
        if (!u.lmsg.content) {
            errno = ENOMEM;
            return -1;
        }
if the lmsg.content memory malloc failed, set errno to ENONMEM
2.</rich_text><rich_text foreground="#ff0000">placement new</rich_text><rich_text>in zeromq in content_t::refcnt
msg.hpp 103
3. gcc 编译器从4.3以后不用 -lpthread, 使用-pthread代替
4.C++快速读文件
</rich_text><rich_text link="webs https://www.byvoid.com/blog/fast-readfile">https://www.byvoid.com/blog/fast-readfile</rich_text><rich_text>


5.模板函数的声明与定义分离会编译失败


第三种办法 最简单的使用swap,清除元素并回收内存

1.     vector &lt;int&gt;().swap(vecInt);  //清除容器并最小化它的容量，

2. 


3.     j= vecInt.capacity();       //j=0  

4.     i = vecInt.size();          //i=0       


该语句是由vector &lt;int&gt;(vecInt).swap(vecInt)的变体而来，一下解释引自csdn：

std::vector&lt;T&gt;(v).swap(v);的作用相当于：    
  {  
  std::vector&lt;T&gt;   temp(v);//1  
  temp.swap(v);//2  
  }  
  第一句产生一个和v内容一模一样的vector，只不过temp的容量是恰好满足其大小的  
  第二句把v和temp交换  
  然后temp就自动解析掉了  
    
  这样写的作用是：把v的容量缩小到最佳值

该例中执行这句时，capacity收缩到500
</rich_text><node name="tips" prog_lang="custom-colors" readonly="False" tags="C++" unique_id="5"><rich_text>1.
        u.lmsg.content =
            (content_t*) malloc (sizeof (content_t) + size_);
        if (!u.lmsg.content) {
            errno = ENOMEM;
            return -1;
        }
if the lmsg.content memory malloc failed, set errno to ENONMEM
2.</rich_text><rich_text foreground="#ff0000">placement new</rich_text><rich_text>in zeromq in content_t::refcnt
msg.hpp 103
3. gcc 编译器从4.3以后不用 -lpthread, 使用-pthread代替
4.C++快速读文件
</rich_text><rich_text link="webs https://www.byvoid.com/blog/fast-readfile">https://www.byvoid.com/blog/fast-readfile</rich_text><rich_text>


5.模板函数的声明与定义分离会编译失败


第三种办法 最简单的使用swap,清除元素并回收内存

1.     vector &lt;int&gt;().swap(vecInt);  //清除容器并最小化它的容量，

2. 


3.     j= vecInt.capacity();       //j=0  

4.     i = vecInt.size();          //i=0       


该语句是由vector &lt;int&gt;(vecInt).swap(vecInt)的变体而来，一下解释引自csdn：

std::vector&lt;T&gt;(v).swap(v);的作用相当于：    
  {  
  std::vector&lt;T&gt;   temp(v);//1  
  temp.swap(v);//2  
  }  
  第一句产生一个和v内容一模一样的vector，只不过temp的容量是恰好满足其大小的  
  第二句把v和temp交换  
  然后temp就自动解析掉了  
    
  这样写的作用是：把v的容量缩小到最佳值

该例中执行这句时，capacity收缩到500</rich_text></node><node name="FAQ" prog_lang="custom-colors" readonly="False" tags="C++" unique_id="6"><rich_text>how to use </rich_text><rich_text foreground="#ff0000">delete this</rich_text><rich_text>
As long as you're careful, it's OK for an object to commit suicide (delete this).
Here's how I define &quot;careful&quot;:
1. You must be absolutely 100% positively sure that this object was allocated via new (not by new[], nor by </rich_text><rich_text link="webs http://www.parashift.com/c++-faq-lite/placement-new.html">placementnew</rich_text><rich_text>, nor a local object on the stack, nor a global, nor a member of another object; but by plain ordinary new).

2. You must be absolutely 100% positively sure that your member function will be the last member function invoked on this object.

3. You must be absolutely 100% positively sure that the rest of your member function (after the delete this line) doesn't touch any piece ofthis object (including calling any other member functions or touching any data members).

4. You must be absolutely 100% positively sure that no one even touches the this pointer itself after the delete this line.  In other words, you must not examine it, compare it with another pointer, compare it with NULL, print it, cast it, do anything with it.

Naturally the usual caveats apply in cases where your this pointer is a pointer to a base class when you don't have a </rich_text><rich_text link="webs http://www.parashift.com/c++-faq-lite/virtual-dtors.html">virtual destructor</rich_text><rich_text>.             


正确释放vector的内存

</rich_text><rich_text link="webs http://blog.jobbole.com/37700/">http://blog.jobbole.com/37700/</rich_text><rich_text>
vector&lt;type&gt;(v).swap(v);

当然，上面这种方法虽然释放了内存，但是同时也增加了拷贝数据的时间消耗。 不过一般需要重新调整容量的情况都是 vector本身元素较少的情况，所以 时间消耗可以忽略不计。
因此建议以后大家都将调用 clear() 改为 swap() 吧。
之所以大多数程序的“入口”是 main，是因为连接器缺省会连接一个叫 crt0.o 或 者 crt0.lib 之类的库，这个库才是一个程序真正的入口，这个真正的入口作了一段初始化之后将控制权交给 main。大多数情况下用户程序不会自 己初始化这些东西，所以缺省连接这个库。

如果你自己完成这部分初始化，完全可以抛弃 main。

main 不是程序的入口，只不过是一个普通的符号而已。


gcc -g -nostartfiles -e myentry myentry.c 
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
int myentry(int argc, char *argv[])
{
    printf(&quot;Start from myentry\n&quot;);
    //return 0;
    exit(0);
}

LD_PRELOAD环境变量加载一些库,覆盖原有的方法,
</rich_text></node><node name="todo" prog_lang="custom-colors" readonly="False" tags="C++" unique_id="7"><rich_text foreground="#000000">1. Loki 封装设计模式的一个类库，有时间看一下</rich_text><rich_text>
</rich_text><rich_text link="webs http://loki-lib.sourceforge.net/index.php?n=Main.HomePage">http://loki-lib.sourceforge.net/index.php?n=Main.HomePage</rich_text><rich_text>
Documentation
</rich_text><rich_text link="webs http://loki-lib.sourceforge.net/html/modules.html">http://loki-lib.sourceforge.net/html/modules.html</rich_text><rich_text>
2. zmq里有一个mutex_t的类,封装了pthread_mutex_xxx的操作
3. Linux poll&amp;Epoll </rich_text><rich_text link="webs http://bbs.chinaunix.net/it/linuxpoll.shtml">http://bbs.chinaunix.net/it/linuxpoll.shtml</rich_text><rich_text>
ioctl, select, poll, epolll这些的用法 
4. YUV转avi
</rich_text><rich_text link="webs http://lihaoyan.blog.sohu.com/146539049.html">http://lihaoyan.blog.sohu.com/146539049.html</rich_text><rich_text>
5.shell
</rich_text><rich_text link="webs http://coolshell.cn/articles/9410.html">http://coolshell.cn/articles/9410.html</rich_text><rich_text>


6. C++数组不支持多态?
</rich_text><rich_text link="webs http://coolshell.cn/articles/9543.html">http://coolshell.cn/articles/9543.html</rich_text><rich_text>


7. C++的坑真的多吗?
</rich_text><rich_text link="webs http://coolshell.cn/articles/7992.html">http://coolshell.cn/articles/7992.html</rich_text><rich_text>
8.微博中有关尾递归和非尾递归的讨论


9. C++ 语言的15个隐晦特性
</rich_text><rich_text link="webs http://blog.jobbole.com/54140/">http://blog.jobbole.com/54140/</rich_text><rich_text>

</rich_text></node></node><node name="ffmpeg" prog_lang="custom-colors" readonly="False" tags="" unique_id="8"><rich_text>1. ffmpeg snapshot，一秒二次

        ffmpeg -y -i test.flv -q:v 1 -r 2 -ss 10 -to 50 s%05d.jpg
ffmpeg -pix_fmt uyvy422 -s 720x576 -r 25 -i all.yuv -b </rich_text><rich_text background="#000000000000">20480k</rich_text><rich_text> -f s16le -ar 48000 -ac 2 -i all.pcm -vcodec libx264 $d

ffmpeg -pix_fmt uyvy422 -s 720x480 -r 25 -i all.yuv -b 20480k -f s16le -ar 48000 -ac 2 -i all.pcm -vcodec libx264 $d
</rich_text></node><node name="python" prog_lang="custom-colors" readonly="False" tags="C++" unique_id="2"><rich_text></rich_text><node name="tips" prog_lang="custom-colors" readonly="False" tags="" unique_id="12"><rich_text>python web 
</rich_text><rich_text link="webs http://www.zackgrossbart.com/hackito/search-engine-python/">http://www.zackgrossbart.com/hackito/search-engine-python/</rich_text><rich_text>
tornado
</rich_text><rich_text link="webs http://blog.csdn.net/littlethunder/article/details/8930157">http://blog.csdn.net/littlethunder/article/details/8930157</rich_text><rich_text>
trondb
</rich_text><rich_text link="webs http://blog.csdn.net/littlethunder/article/details/8918045">http://blog.csdn.net/littlethunder/article/details/8918045</rich_text><rich_text>
django
</rich_text><rich_text link="webs http://blog.sina.com.cn/s/blog_634bc2230100h8au.html">http://blog.sina.com.cn/s/blog_634bc2230100h8au.html</rich_text><rich_text>


Getting Started with Django on Heroku
</rich_text><rich_text link="webs https://devcenter.heroku.com/articles/getting-started-with-django#prerequisites">https://devcenter.heroku.com/articles/getting-started-with-django#prerequisites</rich_text><rich_text>
Django Blog例子
</rich_text><rich_text link="webs http://markchen.me/django-instance-tutorial-blog-1/">http://markchen.me/django-instance-tutorial-blog-1/</rich_text><rich_text>


python tips 一人一python
</rich_text><rich_text link="webs http://www.pythontip.com/blog/all_cat/">http://www.pythontip.com/blog/all_cat/</rich_text><rich_text>


reqiest and response object (Django)
</rich_text><rich_text link="webs https://docs.djangoproject.com/en/1.5//ref/request-response/">https://docs.djangoproject.com/en/1.5//ref/request-response/</rich_text><rich_text>


python 文章
</rich_text><rich_text link="webs http://django-china.cn/topic/173/">http://django-china.cn/topic/173/</rich_text><rich_text>

python 多线程
</rich_text><rich_text link="webs http://blog.jobbole.com/52060/">http://blog.jobbole.com/52060/</rich_text><rich_text> 


python xml dom 
</rich_text><rich_text link="webs http://www.w3schools.com/dom/dom_nodes_set.asp">http://www.w3schools.com/dom/dom_nodes_set.asp</rich_text><rich_text> 
</rich_text></node><node name="tips" prog_lang="custom-colors" readonly="False" tags="" unique_id="13"><rich_text>1. python 生成 随机字符串:
import random
import string
salt = ''.join(random.sample(string.ascii_letters+string.digits, 8))
2. unix get disk space info
</rich_text><rich_text justification="left"></rich_text><rich_text>

3. dict and list 
Python  中的字典使用了hast，因此，在查找中需要遍历整个list的情况，最好把list转为dict
</rich_text><rich_text justification="left"></rich_text><rich_text>
4.使用set求交集
</rich_text><rich_text justification="left"></rich_text><rich_text>
5.对循环的优化
尽量把循环中的计算放到上一层中，用xrange代替range

7.充分利用 Lazy if-evaluation 的特性
8.字符串的优化
a。字符串的连接尽量使用join而不是‘+’，
     同时尽量使用  
        slit = [func(e) for e in elist]

        x = &quot;&quot;.join(slit)
当对字符串可以使用正则表达式或者内置函数来处理的时候，选择内置函数。如 str.isalpha()，str.isdigit()，str.startswith((‘x’, ‘yz’))，str.endswith((‘x’, ‘yz’))

对字符进行格式化比直接串联读取要快，因此要使用

out=&quot;%s%s%s%s&quot;%(head, prologue, query, tail)


9,使用列表解析和生成器表达式
a=[i for i in list]   g = (i for i in list)
10 if done is not None 比语句 if done != None 更快
</rich_text><codebox char_offset="145" frame_height="100" frame_width="700" highlight_brackets="False" show_line_numbers="False" syntax_highlighting="python" width_in_pixels="True">import os from collections import namedtuple _ntuple_diskusage = namedtuple('usage','total used free') def disk_usage(path):    &quot;&quot;&quot;Return disk usage statistics about the given path.        Returned valus is a named tuple with attributes 'total', 'used' and        'free', which are the amount of total, used and free space, in bytes.        &quot;&quot;&quot;       st=os.statvfs(path)       free=st.f_bavail*st.f_frsize        total=st.f_blocks*st.f_frsize        used=(st.f_blocks-st.f_bfree)*st.f_frsize        return _ntuple_diskusage(total,used,free)</codebox><codebox char_offset="221" frame_height="100" frame_width="700" highlight_brackets="False" show_line_numbers="False" syntax_highlighting="python" width_in_pixels="True">fromtimeimporttime
 t=time()
 list=['a','b','is','python','jason','hello','hill','with','phone','test',
'dfdf','apple','pddf','ind','basic','none','baecr','var','bana','dd','wrd']
 #list = dict.fromkeys(list,True)
 printlist
 filter=[]
 foriinrange(1000000):
     forfindin['is','hat','new','list','old','.']:
         iffindnotinlist:
             filter.append(find)
 print&quot;total run time:&quot;
 printtime()-t</codebox><codebox char_offset="234" frame_height="100" frame_width="100" highlight_brackets="False" show_line_numbers="False" syntax_highlighting="python" width_in_pixels="False">fromtimeimporttime
 t=time()
 lista=[1,2,3,4,5,6,7,8,9,13,34,53,42,44]
 listb=[2,4,6,9,23]
 intersection=[]
 foriinrange(1000000):
     list(set(lista)&amp;set(listb))
 print&quot;total run time:&quot;
 printtime()-t</codebox></node></node><node name="Linux" prog_lang="custom-colors" readonly="False" tags="C++" unique_id="3"><rich_text></rich_text><node name="shell" prog_lang="custom-colors" readonly="False" tags="" unique_id="9"><rich_text>find &lt;CONDITION to Find files&gt; -exec &lt;OPERATION&gt; \;
find -mmin -60 -exec ls -l {} \;

redirect io to null 
command &gt; /dev/null 1&gt;2&amp;

1.   set -u，当你使用未初始化的变量时，让bash自动退出。你也可以使用可读性更强一点的set -o nounset

2. 




一、Linux shell 截取字符变量的前8位，有方法如下：
　　1.expr substr “$a” 1 8
　　2.echo $a|awk ‘{print substr(,1,8)}’
　　3.echo $a|cut -c1-8
　　4.expr $a : ‘\(.\\).*’
　　5.echo $a|dd bs=1 count=8 2&gt;/dev/null
二、按指定的字符串截取
　　1、第一种方法: ${varible##*string} 从左向右截取最后一个string后的字符串 ${varible#*string}从左向右截取第一个string后的字符串 ${varible%%string*}从右向左截取最后一个string后的字符串 ${varible%string*}从右向左截取第一个string后的字符串 “*”只是一个通配符可以不要
例子： $ MYVAR=foodforthought.jpg $ echo ${MYVAR##*fo} rthought.jpg $ echo ${MYVAR#*fo} odforthought.jpg
　　2、第二种方法：${varible:n1:n2}:截取变量varible从n1到n2之间的字符串。
可以根据特定字符偏移和长度，使用另一种形式的变量扩展，来选择特定子字符串。试着在 bash 中输入以下行： $ EXCLAIM=cowabunga $ echo ${EXCLAIM:0:3} cow $ echo ${EXCLAIM:3:7} abunga
这种形式的字符串截断非常简便，只需用冒号分开来指定起始字符和子字符串长度。
三、按照指定要求分割： 比如获取后缀名 ls -al | cut -d “.” -f2



防止脚本重复运行方法



main(){
selfPID=&quot;$$&quot;
scriptFile=&quot;$0&quot;
 
typeset existingPid
existingPid=`getExistingPIDs $selfPID &quot;$scriptFile&quot;`
 
if [ ! -z &quot;$existingPid&quot; ]; then
  echo &quot;The script already running, exiting...&quot;
  exit -1
fi
 
doItsTask
 
}
 
#获取除本身进程以外其它运行当前脚本的进程的 PID
getExistingPIDs(){
selfPID=&quot;$1&quot;
scriptFile=&quot;$2&quot;
 
ps -ef | grep &quot;/usr/bin/ksh ${scriptFile}&quot; | grep -v &quot;grep&quot; | awk &quot;{ if(\$2!=$selfPID) print \$2 }&quot;
}
 
doItsTask(){
echo &quot;Task is now being executed...&quot;
sleep 20  #睡眠 20s，以模拟脚本在执行需要长时间完成的任务
}
 
main $*
</rich_text><node name="常用脚本" prog_lang="custom-colors" readonly="False" tags="" unique_id="10"><rich_text>1、查看主机网卡流量#!/bin/bash
#!/bin/bash#network#Mike.Xuwhile : ; do      time='date +%m&quot;-&quot;%d&quot; &quot;%k&quot;:&quot;%M'      day='date +%m&quot;-&quot;%d'      rx_before='ifconfig eth0|sed -n &quot;8&quot;p|awk '{print $2}'|cut -c7-'      tx_before='ifconfig eth0|sed -n &quot;8&quot;p|awk '{print $6}'|cut -c7-'      sleep 2      rx_after='ifconfig eth0|sed -n &quot;8&quot;p|awk '{print $2}'|cut -c7-'      tx_after='ifconfig eth0|sed -n &quot;8&quot;p|awk '{print $6}'|cut -c7-'      rx_result=$[(rx_after-rx_before)/256]      tx_result=$[(tx_after-tx_before)/256]      echo &quot;$time Now_In_Speed: &quot;$rx_result&quot;kbps Now_OUt_Speed: &quot;$tx_result&quot;kbps&quot;      sleep 2donedone2、系统状况监控#!/bin/sh#systemstat.sh#Mike.XuIP=192.168.1.227top -n 2| grep &quot;Cpu&quot; &gt;&gt;./temp/cpu.txtfree -m | grep &quot;Mem&quot; &gt;&gt; ./temp/mem.txtdf -k | grep &quot;sda1&quot; &gt;&gt; ./temp/drive_sda1.txt#df -k | grep sda2 &gt;&gt; ./temp/drive_sda2.txtdf -k | grep &quot;/mnt/storage_0&quot; &gt;&gt; ./temp/mnt_storage_0.txtdf -k | grep &quot;/mnt/storage_pic&quot; &gt;&gt; ./temp/mnt_storage_pic.txttime=`date +%m&quot;.&quot;%d&quot; &quot;%k&quot;:&quot;%M`connect=`netstat -na | grep &quot;219.238.148.30:80&quot; | wc -l`echo &quot;$time  $connect&quot; &gt;&gt; ./temp/connect_count.txt



3、监控主机的磁盘空间，当使用空间超过90％就通过发mail来发警告


#!/bin/bash#monitor available disk spaceSPACE='df | sed -n '/ \ / $ / p' | gawk '{print $5}' | sed  's/%//'if [ $SPACE -ge 90 ]thenfty89@163.comfi


4、 监控CPU和内存的使用情况


#!/bin/bash#script  to capture system statisticsOUTFILE=/home/xu/capstats.csvDATE='date +%m/%d/%Y'TIME='date +%k:%m:%s'TIMEOUT='uptime'VMOUT='vmstat 1 2' USERS='echo $TIMEOUT | gawk '{print $4}' 'LOAD='echo $TIMEOUT | gawk '{print $9}' | sed &quot;s/,//' 'FREE='echo $VMOUT | sed -n '/[0-9]/p' | sed -n '2p' | gawk '{print $4} ' 'IDLE='echo  $VMOUT | sed -n '/[0-9]/p' | sed -n '2p' |gawk '{print $15}' 'echo &quot;$DATE,$TIME,$USERS,$LOAD,$FREE,$IDLE&quot; &gt;&gt; $OUTFILE


5、全方位监控主机


#!/bin/bash# check_xu.sh# 0 * * * * /home/check_xu.sh DAT=&quot;`date +%Y%m%d`&quot;HOUR=&quot;`date +%H`&quot;DIR=&quot;/home/oslog/host_${DAT}/${HOUR}&quot;DELAY=60COUNT=60# whether the responsible directory existif ! test -d ${DIR}then        /bin/mkdir -p ${DIR}fi# general checkexport TERM=linux/usr/bin/top -b -d ${DELAY} -n ${COUNT} &gt; ${DIR}/top_${DAT}.log 2&gt;&amp;1 &amp;# cpu check/usr/bin/sar -u ${DELAY} ${COUNT} &gt; ${DIR}/cpu_${DAT}.log 2&gt;&amp;1 &amp;#/usr/bin/mpstat -P 0 ${DELAY} ${COUNT} &gt; ${DIR}/cpu_0_${DAT}.log 2&gt;&amp;1 &amp;#/usr/bin/mpstat -P 1 ${DELAY} ${COUNT} &gt; ${DIR}/cpu_1_${DAT}.log 2&gt;&amp;1 &amp;# memory check/usr/bin/vmstat ${DELAY} ${COUNT} &gt; ${DIR}/vmstat_${DAT}.log 2&gt;&amp;1 &amp;# I/O check/usr/bin/iostat ${DELAY} ${COUNT} &gt; ${DIR}/iostat_${DAT}.log 2&gt;&amp;1 &amp;# network check/usr/bin/sar -n DEV ${DELAY} ${COUNT} &gt; ${DIR}/net_${DAT}.log 2&gt;&amp;1 &amp;#/usr/bin/sar -n EDEV ${DELAY} ${COUNT} &gt; ${DIR}/net_edev_${DAT}.log 2&gt;&amp;1 &amp;</rich_text></node></node><node name="collections" prog_lang="custom-colors" readonly="False" tags="" unique_id="21"><rich_text>Linux


使用vimdiff作为svn diff的查看代码工具

</rich_text><rich_text link="webs http://color/#3465A4">http://www.cnblogs.com/xuxm2007/archive/2012/05/11/2496243.html</rich_text><rich_text>


</rich_text><rich_text weight="heavy">Linux 常用快捷键core文件设置</rich_text><rich_text>
linux下默认是不产生core文件的，要用ulimit -c unlimited放开
1、开启系统的Core Dump功能

   ulimit -c core_file_size_in_kb

   如果要关闭该功能core_file_size_in_kb为0就行了。

2、设置Core Dump的核心转储文件目录和命名规则

   文件的命名规则放在

   </rich_text><rich_text link="webs http://color/#3465A4">/proc/sys/kernel/core_name_format文件中</rich_text><rich_text>

   使用sysctl -w &quot;kernel.core_name_format=/coredump/%n.core&quot;

   上例的core文件放在/coredump目录下，文件名是进程名+.core

   以下是一些命名的格式说明

   %P   The Process ID (current-&gt;pid)
   %U   The UID of the process (current-&gt;uid)
   %N   The command name of the process (current-&gt;comm)
   %H   The nodename of the system (system_utsname.nodename)
   %%   A &quot;%&quot;



|/usr/share/apport/apport %p %s %c

</rich_text><rich_text weight="heavy">设置默认编辑器</rich_text><rich_text>
  update-alternatives --config editor


dd if=1375752413.742425.data bs=32 skip=1 of=1.flac
</rich_text><rich_text link="webs http://blog.csdn.net/androidyue/article/details/9295505">Ubuntu 12.04 如何修改背景色         http://blog.csdn.net/androidyue/article/details/9295505</rich_text><rich_text>sshfs
sshfs root@livedev:/opt tmp




find &lt;CONDITION to Find files&gt; -exec &lt;OPERATION&gt; \;
find -mmin -60 -exec ls -l {} \;

重定向
redirect io to null 
command &gt; /dev/null 2&gt;&amp;1


</rich_text><rich_text scale="h1">修改时区 时间 等</rich_text><rich_text>

dpkg-reconfigure timezonecon
dpkg-reconfigure tzdata
sudo cp /usr/share/zoneinfo/Asia/ShangHai /etc/localtime
sudo ntpdate cn.pool.ntp.org




</rich_text><rich_text scale="h1">解压deb包</rich_text><rich_text>

dpkg-deb -x xxxx.deb di



curl 
curl --data-binary '@post_data.txt' </rich_text><rich_text link="webs http://192.168.100.228:8080/sendTasks">http://192.168.100.228:8080/sendTasks</rich_text><rich_text>

Linux 修改键盘配置
xev    xmdom -pke


 xmodmap -e &quot;keycode 180 = Escape NoSymbol Escape&quot;


curl
curl -d '@task' &quot;http://192.168.1.50:8080/jobTracker/task/submit&quot; -H&quot;Content-Type:application/json&quot;

Linux 修改 crontab 编辑器
update-alternatives --config editor

1. 查看一个系统可以打开的文件的个数        cat /proc/sys/fs/file-max





sshfs is an easy way to provide file access to a remote system with ssh. On Ubuntu, all you need to install it (on the remote client, nothing to do on the server if it already runs ssh) is run:
sudo apt-get install sshfs
To make things easier, you can make an /etc/fstab entry with the settings to mount a remote directory:
sshfs#chip@example.unicom.com:/home/chip /home/chip/Remote-Home fuse umask=0,defaults,noauto,user 0 0
Now, to mount the directory I just type (from my home directory):
$ </rich_text><rich_text weight="heavy">mount Remote-Home</rich_text><rich_text>
The problem is that if I try to unmount the directory it fails:
$ </rich_text><rich_text weight="heavy">umount Remote-Home</rich_text><rich_text>
umount: /home/chip/Remote-Home mount disagrees with the fstab
The command you have to use is:
$ </rich_text><rich_text weight="heavy">fusermount -u Remote-Home
</rich_text><rich_text>But you can make umount work with two simple steps.
First (this is the trick), run:
$ </rich_text><rich_text weight="heavy">sudo ln -s mount.fuse mount.fuse.sshfs</rich_text><rich_text>
Then, make two changes to the fstab file. First, change the filesystem type (column three) from fuse to fuse.sshfs. Then, remove &quot;sshfs#&quot; from the first field. Now, it will look something like:
chip@example.unicom.com:/home/chip /home/chip/Remote-Home fuse.sshfs umask=0,defaults,noauto,user 0 0
Now, everything will work as desired.
$ </rich_text><rich_text weight="heavy">mount Remote-Home</rich_text><rich_text>
 .
 .
 .
$ </rich_text><rich_text weight="heavy">umount -v Remote-Home</rich_text><rich_text>
chip@example.unicom.com:/home/chip umounted
 
 
sshfs root@livedev:/opt tmp


</rich_text></node><node name="todo" prog_lang="custom-colors" readonly="False" tags="" unique_id="22"><rich_text>Linux 剪裁
</rich_text><rich_text link="webs http://blog.csdn.net/jinsen/article/details/4890922">http://blog.csdn.net/jinsen/article/details/4890922</rich_text><rich_text>
2. Linux 破解wifi密码
</rich_text><rich_text link="webs http://linux.cn/thread/12013/1/1/">http://linux.cn/thread/12013/1/1/</rich_text><rich_text>
3. Linux Grep 算法

</rich_text><rich_text link="webs http://www.cnblogs.com/lanxuezaipiao/p/3452579.html">http://www.cnblogs.com/lanxuezaipiao/p/3452579.html</rich_text><rich_text>
4.Linux 技巧
</rich_text><rich_text link="webs http://linux.cn/article-2389-1.html">http://linux.cn/article-2389-1.html</rich_text><rich_text>

</rich_text></node></node><node name="tools" prog_lang="custom-colors" readonly="False" tags="" unique_id="14"><rich_text>taskwarrior 
</rich_text><rich_text link="webs http://taskwarrior.org/projects/show/taskwarrior">http://taskwarrior.org/projects/show/taskwarrior</rich_text><rich_text>
javascript x86
</rich_text><rich_text link="webs http://bellard.org/jslinux/">http://bellard.org/jslinux/</rich_text><rich_text>
taobao code 据说有不少的C++
</rich_text><rich_text link="webs http://code.taobao.org/">http://code.taobao.org/</rich_text><rich_text>
wiki plantUML 

</rich_text><rich_text link="webs http://blog.csdn.net/ciaos/article/details/8501446">http://blog.csdn.net/ciaos/article/details/8501446</rich_text><rich_text>

</rich_text></node><node name="vim" prog_lang="custom-colors" readonly="False" tags="" unique_id="15"><rich_text>:earlier 1f直接恢复到上次写入
:set rnu 相对行号


http://vim.sourceforge.net/scripts/script_search_results.php?order_by=rating
</rich_text></node><node name="vobile" prog_lang="custom-colors" readonly="False" tags="" unique_id="16"><rich_text>./vdna_query -s 192.168.1.46 -u admin  -w admin123 -T dna --profile=Common -i 2.1387533947744.1387534303616.vdna -r t.xml</rich_text></node><node name="Myself" prog_lang="custom-colors" readonly="False" tags="" unique_id="17"><rich_text></rich_text><node name="TOREAD" prog_lang="custom-colors" readonly="False" tags="" unique_id="18"><rich_text>计算机类:
       SICP
      core algorithms deployed
       </rich_text><rich_text link="webs http://cstheory.stackexchange.com/questions/19759/core-algorithms-deployed/19773#19773">http://cstheory.stackexchange.com/questions/19759/core-algorithms-deployed/19773#19773</rich_text><rich_text>



LDD3          Linux Device Driver 3rd
LKD3          Linux Kernel Development 3rd
ULK3          Understanding the Linux Kernel 3rd
PLKA          Professional Linux Kernel Architecture
UML            User Mode Linux

Intel V3       Intel? 64 and IA-32 Architectures Software Developer’s Manual Volume 3 (3A, 3B &amp; 3C): System Programming Guide



经济类:
    国富论
</rich_text><rich_text link="webs http://wenku.baidu.com/view/38ec644033687e21af45a9ae.html">http://wenku.baidu.com/view/38ec644033687e21af45a9ae.html</rich_text><rich_text>






文学类:
    王朔文集
</rich_text></node><node name="music" prog_lang="custom-colors" readonly="False" tags="" unique_id="19"><rich_text>Sitting Down here - LeneMarlin
The Game - Lunik
Chancenlos - Annett Louisan
Till I see you again - xx
Somersault - Courtney Jaye
人质 - 张惠妹
她来听我的演唱会 - 张学友
爱笑的眼睛 - 徐若暄
情歌王 - 古巨基
如果爱是一场婚礼 - 金巧巧
三个人的错误 - 王宛之
哭笑不得 - xx
阳光下的我们 - 
别找我麻烦 -
我在朋友婚礼上唱这首歌 - 徐海星
良人 - 邓芙茹
我们好像在哪见过 - 杨综纬
小狗圆舞曲 - 肖邦
</rich_text></node><node name="todo" prog_lang="custom-colors" readonly="False" tags="" unique_id="20"><rich_text>functional 
线程安全


wirte a script which vim can load tags which the open file is needed and lib script only, it depends file type too


寻找业余项目可以尝试从Elance、 oDesk或者Freelancer这些网站开始。

</rich_text></node></node><node name="Mysql" prog_lang="custom-colors" readonly="False" tags="" unique_id="11"><rich_text>1.  mysql show connections

2. mysql&gt; show status like '%onn%';

3. SHOW PROCESSLIST

4. SET NAMES 'utf8'    #mysql 设置编码



mysql&gt; select current_timestamp() ;

</rich_text></node><node name="git" prog_lang="custom-colors" readonly="False" tags="C++" unique_id="4"><rich_text>touch README.md git init git commit -m &quot;first commit&quot; git remote add origingit@github.com:szqh97/test.gitgit push -u origin master

1. git 恢复删除的文件 

        git checkout filename



http://blog.xupeng.me/2011/12/14/migrate-to-octopress/
</rich_text></node></cherrytree>